@startuml DARTSyncService Sequence

skinparam Style strictuml
hide empty description
title DARTSyncronizeService Startup Sequence Diagram

participant TagionService as tagion
participant DARTSyncService as dartsync
participant Logger as logger
database DART as dart
participant BlockFile as blockfile
participant DARTSynchronizationPool as syncpool
participant "ReplayPool!Journal" as journalpool
participant "ReplayPool!Recorder" as recorderpool
participant P2pSynchronizationFactory as syncfactory
participant ActiveNodeSubscribtion as nodesubscription

tagion -> dartsync : spawn(Options options, \n p2plib.NodeI node, \n SecureNet master_net, \n DART.SectorRange sector_range)
dartsync -> logger : log.register(options.dart.sync.task_name)
dartsync -> dartsync : state = DARTSynchronizeState.WAITING

alt if options.dart.initialize
    dartsync -> dart : create(options.dart.path, BLOCK_SIZE)
    dart -> blockfile : create(options.dart.path, \n DARTFile.stringof, \n BLOCK_SIZE)
    blockfile -> blockfile : create file for DART
end

dartsync -> dart : new DART(net, \n filename, \n sector_range.from_sector, \n sector_range.to_sector)
dart -> blockfile : new BlockFile(filename)
dartsync -> dart : dump()

dartsync -> journalpool : journalReplayFiber = new ReplayPool!string(dart.replay(journal))
dartsync -> recorderpool : recorderReplayFiber = new ReplayPool!Recorde(dart.modify(recorder))

dartsync -> dartsync : connectionPool = new shared(ConnectionPoolT)(options.dart.sync.host.timeout.msecs)
dartsync -> syncfactory : sync_factory = new P2pSynchronizationFactory(dart, options.port, node, connectionPool, options.dart, net.pubkey);
dartsync -> syncpool : syncPool = new DARTSynchronizationPool(dart.sectors, journalReplayFiber, options.dart);

dartsync -> dartsync : request_handling = false

alt if options.dart.synchronize
    dartsync -> dartsync : state = DARTSynchronizeState.WAITING
else else
    dartsync -> dartsync : state = DARTSynchronizeState.READY
end

dartsync -> nodesubscription : subscription = ActiveNodeSubscribtion(options)
dartsync -> tagion : send(Control.LIVE)

loop while(!stop)
    dartsync -> dartsync : listening...
    note right : See diagram "DARTSyncronizeService listening"
end

...
...stopping service......

dartsync -> syncpool : stop()
dartsync -> dartsync : node.closeListener(options.dart.sync.protocol_id)
dartsync -> tagion : prioritySend(Control.END)

@enduml
