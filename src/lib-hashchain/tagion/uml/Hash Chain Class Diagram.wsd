@startuml

interface HashChainBlock {
    + Buffer getHash() const = 0
    + Buffer getPrevious() const = 0

    + HiBON toHiBON() // from HiBONRecord

    + final bool isRoot()
}

class RecorderChainBlock {
    + Buffer fingerprint
    + Buffer bullseye
    + Buffer previous
    + Document recorder_doc

    mixin HiBONRecord

    + this(Document recorder_doc, Buffer previous, Buffer bullseye, HashNet)
    + this(Document doc, HashNet)

    + override Buffer getHash() const
    + override Buffer getPrevious() const
}

HashChainBlock <|.. RecorderChainBlock

class EpochChainBlock {
    ...

    mixin HiBONRecord

    + override Buffer getHash() const
    + override Buffer getPrevious() const
}

HashChainBlock <|.. EpochChainBlock

class "HashChain(Block : HashChainBlock)" as HashChain {
    # HashChainStorage!Block _storage
    # Block _last_block;

    + this(HashChainStorage storage)

    # final protected Block findLastBlock()

    + const(Block) getLastBlock()
    + void append(Block block)

    + bool isValidChain()

    + replay(void delegate(Block) action)
    + replayFrom(void delegate(Block) action, bool delegate(Block) condition)

    + final HashChainStorage!Block storage()
}

HashChainBlock *- HashChain : handles & stores
HashChain -* HashChainStorage : owns

interface "HashChainStorage(Block : HashChainBlock)" as HashChainStorage {
    + void write(const(Block) block)
    + Block read(Buffer fingerprint)
    + Block find(bool delegate(Block) predicate)
    + Buffer[] getHashes()
}

class "HashChainFileStorage(Block : HashChainBlock)" as HashChainFileStorage {
    # string folder_path
    # HashNet net

    + this(string folder_path, const HashNet net)

    + override void write(const(Block) block)
    + override Block read(Buffer fingerprint) 
    + override Block find(bool delegate(Block) predicate)
    + override Buffer[] getHashes()
}

HashChainStorage <|.. HashChainFileStorage

@enduml
